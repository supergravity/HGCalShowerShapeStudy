//////////////////////////////////////////////////////////
// This class has been automatically generated on
// Fri Apr 15 17:10:51 2011 by ROOT version 5.28/00b
// from TTree H4l /H4l Tree
// found on file: ../MakePlots/H4l.root
//////////////////////////////////////////////////////////

#ifndef makePlots_h
#define makePlots_h

#include <TROOT.h>
#include <TChain.h>
#include <TFile.h>
#include <TF1.h>
#include <TH1.h>
#include <TH2.h>
#include <vector>
#include <algorithm> //std::sort
#include <functional>

// Local objects:
#include "CompartmentObject.h" //hold the layer(s)
class CompartmentObject;

#include "waferGeom.h"
class HexGeometry;


//#ifndef  BASE4MOM
//#define  BASE4MOM
#include "Math/GenVector/PtEtaPhiE4D.h"
#include "Math/GenVector/LorentzVector.h"
typedef  ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiE4D<double> > Base4Mom;
#include "P4Helpers.h"
//#endif

//const double ENEPERMIP    =0.000052;//GeV (52KeV/MIP)
const double ENEPERMIP    = 56.31e-06;  // 125pion MPV response
const int    MAXENEBINS   =1;
const int    NLAYERS      =8;
const int    HIT_LIMIT    =2350;
const int    HIT_MAX_ARRAY=4096;
const double MMtoCM       =0.1;
const double MEVTOGEV     =0.001;

//* Prototype Configuration:
//                     Layer:   0   1    2     3    4    5    6    7
const double leadX0 [NLAYERS]={4.5,0.0 ,0.0 , 0.0 ,0.  ,0.  ,1.0 ,0.  };
const double tungX0 [NLAYERS]={0.0,2.85,2.85, 2.17,2.51,0.  ,1.37,2.17};
const double coppX0 [NLAYERS]={0.4,0.4 ,0.4 , 0.4 ,0.  ,0.8 ,0.  ,0.8 };
const double cuwX0  [NLAYERS]={0.15,0.15,0.15,0.25,0.  ,0.75,0.  ,1.0 };


using namespace std;



class makePlots {
 public :

  makePlots (TChain* inchain);
  ~makePlots();

  //PFOInfoBranches PFO();

  TH1D    *hEresol[MAXENEBINS];
  TH2D    *hetaphiprof[NLAYERS];
  TH1D    *dRprof[NLAYERS];

  bool FillResolHistos();
  void PrintGenInfo();
  double  DiffPhi(double dPhi){
    if (fabs(dPhi) > M_PI) return fabs(2.*M_PI-fabs(dPhi));
    return fabs(dPhi);
  }
  double GetAreaInPadUnits(int iL,double dR) {
    double area=1.0;
    double padsize=1;//cm
    if(iL<20) {
      padsize=sqrt(0.9);//cm
    }
    else {
      padsize=sqrt(1.8);
    }
    //cout << padsize << endl;
    if(dR<padsize) area = 1.0;
    else           area = 2*M_PI*dR/padsize;
    return area;
  };



  bool doTruth;


  TTree          *fChain;   //!pointer to the analyzed TTree or TChain
  Int_t           fCurrent; //!current Tree number in a TChain

  
  //MC:
  // Declaration of leaf types
  vector<float>   *simHitLayEn1E;
  vector<float>   *simHitLayEn2E;
  vector<float>   *simHitLayEn1H;
  vector<float>   *simHitLayEn2H;
  Double_t        xBeam;
  Double_t        yBeam;
  Double_t        zBeam;
  Double_t        pBeam;
  vector<unsigned int> *simHitCellIdE;
  vector<float>   *simHitCellEnE;
  vector<unsigned int> *simHitCellIdH;
  vector<float>   *simHitCellEnH;
  
  // List of branches
  TBranch        *b_simHitLayEn1E;   //!
  TBranch        *b_simHitLayEn2E;   //!
  TBranch        *b_simHitLayEn1H;   //!
  TBranch        *b_simHitLayEn2H;   //!
  TBranch        *b_xBeam;   //!
  TBranch        *b_yBeam;   //!
  TBranch        *b_zBeam;   //!
  TBranch        *b_pBeam;   //!
  TBranch        *b_simHitCellIdE;   //!
  TBranch        *b_simHitCellEnE;   //!
  TBranch        *b_simHitCellIdH;   //!
  TBranch        *b_simHitCellEnH;   //!
  
  //Data:
  // Declaration of leaf types
  Int_t           evtID;
  Int_t           nhit;
  vector<int>     *cellID;
  vector<double>  *x;
  vector<double>  *y;
  vector<double>  *z;
  vector<double>  *energy;
  Float_t         thrustX0;
  Float_t         thrustX;
  Float_t         thrustY0;
  Float_t         thrustY;
  vector<double>  *cluster_x;
  vector<double>  *cluster_y;
  vector<double>  *cluster_z;
  vector<double>  *cluster_energy;
  vector<int>     *cluster_size;
  
  // List of branches
  TBranch        *b_evtID;   //!
  TBranch        *b_nhit;   //!
  TBranch        *b_cellID;   //!
  TBranch        *b_x;   //!
  TBranch        *b_y;   //!
  TBranch        *b_z;   //!
  TBranch        *b_energy;   //!
  TBranch        *b_thrustX0;   //!
  TBranch        *b_thrustX;   //!
  TBranch        *b_thrustY0;   //!
  TBranch        *b_thrustY;   //!
  TBranch        *b_cluster_x;   //!
  TBranch        *b_cluster_y;   //!
  TBranch        *b_cluster_z;   //!
  TBranch        *b_cluster_energy;   //!
  TBranch        *b_cluster_size;   //!
  
  
  virtual Int_t    Cut(Long64_t entry);
  void     Init();
  void     Loop();
  virtual void     Show(Long64_t entry = -1);
  virtual Int_t    GetEntry(Long64_t entry);
  virtual Long64_t LoadTree(Long64_t entry);
  virtual Bool_t   Notify();
  
   //TFile* outfile;

 private:

  Int_t           hit_size;
  Int_t           hit_layer[HIT_MAX_ARRAY];   //[hit_size]
  Double_t        hit_EMenergy[HIT_MAX_ARRAY];   //[hit_size]
  Double_t        hit_Hadenergy[HIT_MAX_ARRAY];   //[hit_size]
  Double_t        hit_Rawenergy[HIT_MAX_ARRAY];   //[hit_size]
  Double_t        hit_Eta[HIT_MAX_ARRAY];   //[hit_Eta]
  Double_t        hit_Phi[HIT_MAX_ARRAY];   //[hit_Phi]
  Double_t        hit_X  [HIT_MAX_ARRAY];   //
  Double_t        hit_Y  [HIT_MAX_ARRAY];   //
  Double_t        hit_Z  [HIT_MAX_ARRAY];   //


  //* Layers:
  std::vector<CompartmentObject*> Layer;

  int buildCompObjects(){

    // Uncode x,y,z from input
    //cout << "testing icell size:" << simHitCellIdE->size() << endl;
    HexGeometry geomc(false);//127 cells (133 pads some ganged together)
    if(doTruth) {
      for(unsigned int icell=0; icell<simHitCellIdE->size(); icell++){
        int cellno = (simHitCellIdE->at(icell)>>0)&0xFF; 
        std::pair<double,double> xy = geomc.position(cellno);
        double x     =  xy.first;
        double y     =  xy.second;
        double ene   =  simHitCellEnE->at(icell);
        int    layer = ((simHitCellIdE->at(icell)>>19)&0x7F);
        //cout << "testing icell:" << icell << " x:"<<x<<" y:"<<y 
        //     <<" layer:"<<layer  << " E=" << ene << endl;
        
        hit_layer    [icell]=layer; //starting from 1
        hit_Rawenergy[icell]=ene;
        hit_X        [icell]=x;
        hit_Y        [icell]=y;
      }
    }
    else {
      for(unsigned int icell=0; icell<cellID->size(); icell++){
        int cellno = (cellID->at(icell)>>0)&0xFF; 
        std::pair<double,double> xy = geomc.position(cellno);
        double x     =  xy.first;
        double y     =  xy.second;
        double ene   =  energy->at(icell);
        int    layer = ((cellID->at(icell)>>19)&0x7F);
        //cout << "testing icell:" << icell << " x:"<<x<<" y:"<<y 
        //     <<" layer:"<<layer  << " E=" << ene << endl;
        
        hit_layer    [icell]=layer; //starting from 1
        hit_Rawenergy[icell]=ene*MEVTOGEV;
        hit_X        [icell]=x;
        hit_Y        [icell]=y;
      }
    }
    //getchar();
    
    // Find the seed
    for(int iL=0;iL<NLAYERS; ++iL){
      double maxene=-1.;
      double maxeta=-999.;
      double maxphi=-999.;
      double maxX  =-999.;
      double maxY  =-999.;
      double maxZ  =-999.;
      if(doTruth) {
        for(unsigned int ih=0; ih<simHitCellIdE->size(); ih++){
          if(hit_layer[ih]!=(iL+1)) continue;
          if(hit_Rawenergy[ih]>maxene) {
            maxene=hit_Rawenergy[ih];
            maxX  =hit_X[ih];
            maxY  =hit_Y[ih];
          }
        }
      }
      else {
        for(unsigned int ih=0; ih<cellID->size(); ih++){
          if(hit_layer[ih]!=(iL+1)) continue;
          if(hit_Rawenergy[ih]>maxene) {
            maxene=hit_Rawenergy[ih];
            maxX  =hit_X[ih];
            maxY  =hit_Y[ih];
          }
        }
      }
      
      CompartmentObject *tmp = new CompartmentObject;
      int nhitsInLayer=0;
      //cout << maxene << " " << maxene/ENEPERMIP << endl;
      //tmp->SetEneMax(maxene/ENEPERMIP);
      tmp->SetEneMax(maxene);
      tmp->SetEtaMax(maxeta);
      tmp->SetPhiMax(maxphi);
      tmp->SetXMax  (maxX  );
      tmp->SetYMax  (maxY  );
      tmp->SetZMax  (maxZ  );
      if(doTruth){
        for(unsigned int ih=0; ih<simHitCellIdE->size(); ih++){
          if(hit_layer[ih]==(iL+1)){
            tmp->SetEtaHit(hit_Eta[ih],nhitsInLayer);
            tmp->SetPhiHit(hit_Phi[ih],nhitsInLayer);
            tmp->SetXHit(hit_X[ih],nhitsInLayer);
            tmp->SetYHit(hit_Y[ih],nhitsInLayer);
            tmp->SetZHit(hit_Z[ih],nhitsInLayer);
            //tmp->SetErawHit(hit_Rawenergy[ih]/ENEPERMIP,nhitsInLayer);
            tmp->SetErawHit(hit_Rawenergy[ih],nhitsInLayer);
            nhitsInLayer++;
          }
        }
      }
      else {
        for(unsigned int ih=0; ih<cellID->size(); ih++){
          if(hit_layer[ih]==(iL+1)){
            tmp->SetEtaHit(hit_Eta[ih],nhitsInLayer);
            tmp->SetPhiHit(hit_Phi[ih],nhitsInLayer);
            tmp->SetXHit(hit_X[ih],nhitsInLayer);
            tmp->SetYHit(hit_Y[ih],nhitsInLayer);
            tmp->SetZHit(hit_Z[ih],nhitsInLayer);
            tmp->SetErawHit(hit_Rawenergy[ih],nhitsInLayer);
            nhitsInLayer++;
          }
        }
      }
      tmp->SetLeadX0(leadX0[iL]);
      tmp->SetWX0   (tungX0[iL]);
      tmp->SetCuX0  (coppX0[iL]);
      tmp->SetCuWX0 ( cuwX0[iL]);
      tmp->SetNhits(nhitsInLayer);
      Layer.push_back(tmp);
    }
    return 0;
  };
  
  void Clear(){
    //We need to clear all the pointers inside the vectors
    //for (unsigned int i=0;i<PFOs.size();++i){
    //  delete PFOs.at(i);
    //}
    //PFOs.clear();
    Layer.clear();
  }




  //* Ntuple
  TTree *outTree;
  float m_Mgg;
  float m_Dyjj;
  float m_Mjj;
  float m_Etaj1;
  float m_Etastar;
  float m_dPhi2g2j;
  float m_weight;
  float m_BDTG;

 private:


};

#endif

